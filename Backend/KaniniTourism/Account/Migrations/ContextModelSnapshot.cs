// <auto-generated />
using System;
using AccountAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountAPI.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccountAPI.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AgencyID")
                        .HasColumnType("int");

                    b.Property<string>("AgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSTnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsApproved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("AccountAPI.Models.Traveller", b =>
                {
                    b.Property<int>("TravellerId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TravellerId");

                    b.ToTable("Travellers");
                });

            modelBuilder.Entity("AccountAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[] { 94, 247, 140, 30, 161, 181, 185, 126, 146, 94, 129, 195, 67, 221, 122, 161, 233, 186, 109, 72, 70, 157, 222, 124, 12, 191, 104, 106, 60, 166, 15, 68, 44, 212, 255, 63, 26, 147, 153, 214, 107, 178, 122, 145, 231, 157, 174, 66, 206, 128, 82, 34, 239, 46, 38, 221, 211, 225, 182, 89, 238, 44, 111, 235 },
                            PasswordKey = new byte[] { 196, 28, 1, 208, 146, 192, 125, 145, 79, 148, 31, 76, 166, 65, 140, 237, 34, 252, 135, 233, 214, 101, 187, 230, 196, 199, 232, 228, 245, 41, 87, 81, 59, 102, 12, 201, 237, 213, 90, 128, 167, 210, 56, 52, 187, 165, 191, 105, 47, 244, 246, 68, 208, 35, 225, 137, 97, 159, 172, 174, 186, 235, 15, 154, 247, 242, 8, 23, 70, 166, 156, 49, 234, 98, 161, 100, 196, 221, 140, 205, 247, 230, 126, 37, 177, 247, 79, 95, 213, 33, 233, 102, 122, 164, 22, 98, 84, 120, 14, 64, 103, 188, 50, 46, 198, 105, 185, 232, 254, 53, 67, 60, 55, 133, 95, 249, 189, 144, 136, 248, 181, 53, 94, 158, 252, 63, 4, 2 },
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("AccountAPI.Models.Agent", b =>
                {
                    b.HasOne("AccountAPI.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AccountAPI.Models.Traveller", b =>
                {
                    b.HasOne("AccountAPI.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("TravellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
